// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bookatable.Neptune.QA.Web.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("JustGivings")]
    public partial class JustGivingsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "JustGiving.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "JustGivings", "    As a user\r\n\tIn order to make a donation \r\n\tI need to go though the donation w" +
                    "orkflow\r\n//Background: I have a browser", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A user can donate on donation page 2050")]
        [NUnit.Framework.CategoryAttribute("JustGivings")]
        public virtual void AUserCanDonateOnDonationPage2050()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A user can donate on donation page 2050", new string[] {
                        "JustGivings"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("A user browse to JustGivings donation page 2050", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("Donation page is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.And("user chooses to donate an amount of \'50\' in \'EUR\' currency, enters name \'DonatorN" +
                    "ame\' and \'Donator message\' message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("in the Email Entry Page user enters email \'zamani_b@yahoo.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("in the Account Creation Page user enters pasword \'passw0rd\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Card type",
                        "Card number",
                        "Expiry month",
                        "Expiry year",
                        "Name on card"});
            table1.AddRow(new string[] {
                        "Visa Debit",
                        "4659104220427633",
                        "07",
                        "2019",
                        "B ZAMANI"});
#line 13
 testRunner.And("in the Payment Method Page user enters the following card details", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Country",
                        "Postcode",
                        "Address line 1",
                        "City"});
            table2.AddRow(new string[] {
                        "United Kingdom",
                        "W3 6YL",
                        "5 Curtis Drive",
                        "London"});
#line 16
 testRunner.And("in the Billing Address Page user enters the following address details", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "last four digits of the card",
                        "Post Code"});
            table3.AddRow(new string[] {
                        "50",
                        "7633",
                        "W3 6YL"});
#line 19
 testRunner.Then("user lands on the Donate & Review page where the following details ae displayed", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
